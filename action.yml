name: 'Maximize build disk space (Only remove unwanted software)'
description: 'Maximize the available disk space for your build job by removing unwanted software'
branding:
  icon: 'crop'
  color: 'blue'
inputs:
  use-sudo:
    description: 'Whether to use sudo for removing files. Default is true.'
    required: false
    default: 'true'
  remove-dotnet:
    description: 'Removes .NET runtime and libraries. (frees ~2 GB)'
    required: false
    default: 'true'
  remove-android:
    description: 'Removes Android SDKs and Tools. (frees ~9 GB)'
    required: false
    default: 'true'
  remove-haskell:
    description: 'Removes GHC (Haskell) artifacts. (frees ~5.2 GB)'
    required: false
    default: 'true'
  remove-codeql:
    description: 'Removes CodeQL Action Bundles. (frees ~5.4 GB)'
    required: false
    default: 'true'
  remove-docker-images:
    description: 'Removes cached Docker images. (frees ~3.2 GB)'
    required: false
    default: 'true'
  remove-large-packages:
    description: 'Removes unwanted large Apt packages. (frees ~3.1 GB)'
    required: false
    default: 'true'
  remove-cached-tools:
    description: 'Removes cached tools used by setup actions by GitHub. (frees ~8.3 GB)'
    required: false
    default: 'true'
  remove-swapfile:
    description: 'Removes the Swapfile. (frees ~4 GB)'
    required: false
    default: 'false'
  verbose:
    description: 'Enables detailed logging of the action'
    required: false
    default: 'false'
runs:
  using: "composite"
  steps:
    - name: Disk space report before modification
      shell: bash
      run: |
          echo "==> Available space before cleanup"
          echo
          df -h

    - name: Maximize build disk space
      shell: bash
      run: |
          set -euo pipefail
          if [[ "${{ inputs.use-sudo }}" == 'true' ]]; then
            SUDO_PREFIX="sudo"
          else
            SUDO_PREFIX=""
          fi

          echo -n "  Removing:     "
          if [[ ${{ inputs.remove-dotnet }} == 'true' ]]; then
            echo -n "dotnet "
          fi
          if [[ ${{ inputs.remove-android }} == 'true' ]]; then
            echo -n "android "
          fi
          if [[ ${{ inputs.remove-haskell }} == 'true' ]]; then
            echo -n "haskell "
          fi
          if [[ ${{ inputs.remove-codeql }} == 'true' ]]; then
            echo -n "codeql "
          fi
          if [[ ${{ inputs.remove-docker-images }} == 'true' ]]; then
            echo -n "docker "
          fi
          if [[ ${{ inputs.remove-large-packages }} == 'true' ]]; then
            echo -n "large_packages "
          fi
          if [[ ${{ inputs.remove-cached-tools }} == 'true' ]]; then
            echo -n "cached_tools "
          fi
          if [[ ${{ inputs.remove-swapfile }} == 'true' ]]; then
            echo -n "swapfile "
          fi
          echo

          verbose=""
          if [[ ${{ inputs.verbose }} == 'true' ]]; then
            verbose=-v
          fi

          echo "Removing unwanted software... "
          if [[ ${{ inputs.remove-dotnet }} == 'true' ]]; then
            sudo rm -rf ${verbose} /usr/share/dotnet
          fi
          if [[ ${{ inputs.remove-android }} == 'true' ]]; then
            sudo rm -rf ${verbose} /usr/local/lib/android
          fi
          if [[ ${{ inputs.remove-haskell }} == 'true' ]]; then
            sudo rm -rf ${verbose} /opt/ghc
            sudo rm -rf ${verbose} /usr/local/.ghcup
          fi
          if [[ ${{ inputs.remove-codeql }} == 'true' ]]; then
            sudo rm -rf ${verbose} /opt/hostedtoolcache/CodeQL
          fi
          if [[ ${{ inputs.remove-docker-images }} == 'true' ]]; then
            if [[ ${{ inputs.verbose }} == 'true' ]]; then
              sudo docker image prune --all --force
            else
              sudo docker image prune --all --force > /dev/null
            fi
          fi
          CODENAME=$(lsb_release -c | cut -d ":" -f 2 | xargs)
          if [[ ${{ inputs.remove-large-packages }} == 'true' ]]; then
            if [[ ${{ inputs.verbose }} == 'true' ]]; then
              sudo apt-get remove -y '^aspnetcore-.*'
              sudo apt-get remove -y '^dotnet-.*'
              sudo apt-get remove -y '^llvm-.*'
              sudo apt-get remove -y 'php.*'
              sudo apt-get remove -y '^mongodb-.*'
              sudo apt-get remove -y '^mysql-.*'
              if [[ "$(uname -m)" == "x86_64" ]]; then
                sudo apt-get remove -y google-chrome-stable microsoft-edge-stable
                sudo apt-get remove -y google-cloud-cli --fix-missing
                sudo apt-get remove -y powershell --fix-missing
              fi
              sudo apt-get remove -y azure-cli firefox mono-devel libgl1-mesa-dri --fix-missing
              sudo apt-get autoremove -y
              sudo apt-get clean
            else
              sudo apt-get remove -y '^aspnetcore-.*' > /dev/null
              sudo apt-get remove -y '^dotnet-.*' > /dev/null
              sudo apt-get remove -y '^llvm-.*' > /dev/null
              sudo apt-get remove -y 'php.*' > /dev/null
              sudo apt-get remove -y '^mongodb-.*' > /dev/null
              sudo apt-get remove -y '^mysql-.*' > /dev/null
              if [[ "$(uname -m)" == "x86_64" ]]; then
                sudo apt-get remove -y google-chrome-stable microsoft-edge-stable > /dev/null
                sudo apt-get remove -y google-cloud-cli --fix-missing > /dev/null
                sudo apt-get remove -y powershell --fix-missing > /dev/null
              fi
              sudo apt-get remove -y azure-cli firefox mono-devel libgl1-mesa-dri --fix-missing > /dev/null
              sudo apt-get autoremove -y > /dev/null
              sudo apt-get clean > /dev/null
            fi
          fi
          if [[ ${{ inputs.remove-cached-tools }} == 'true' ]]; then
            sudo rm -rf ${verbose} "$AGENT_TOOLSDIRECTORY"
          fi
          if [[ ${{ inputs.remove-swapfile }} == 'true' ]]; then
            sudo swapoff -a ${verbose}
            sudo rm -f ${verbose} /mnt/swapfile
          fi
          echo "... done"

    - name: Disk space report after modification
      shell: bash
      run: |
          echo "==> Available space after cleanup"
          echo
          df -h
